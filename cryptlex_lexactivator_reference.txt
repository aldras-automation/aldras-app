Help on class LexActivator in module cryptlex.lexactivator.lexactivator:
class LexActivator(builtins.object)
 |  Static methods defined here:
 |
 |  ActivateLicense()
 |      Activates the license by contacting the Cryptlex servers. It validates the
 |      key and returns with encrypted and digitally signed token which it stores and
 |      uses to activate your application.
 |
 |      This function should be executed at the time of registration, ideally on a
 |      button click.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_EXPIRED, LA_SUSPENDED, LA_FAIL
 |
 |  ActivateLicenseOffline(file_path)
 |      Activates the license using the offline activation response file.
 |
 |      Args:
 |              file_path (str): path of the offline activation response file.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_EXPIRED, LA_SUSPENDED, LA_FAIL
 |
 |  ActivateLocalTrial(trialLength)
 |      Starts the local (unverified) trial.
 |
 |      This function should be executed when your application starts first time on
 |      the user's computer, ideally on a button click.
 |
 |      Args:
 |              trialLength (int): trial length in days
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_LOCAL_TRIAL_EXPIRED, LA_FAIL
 |
 |  ActivateTrial()
 |      Starts the verified trial in your application by contacting the Cryptlex
 |      servers.
 |
 |      This function should be executed when your application starts first time on
 |      the user's computer, ideally on a button click.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_TRIAL_EXPIRED
 |
 |  ActivateTrialOffline(file_path)
 |      Activates the trial using the offline activation response file.
 |
 |      Args:
 |              file_path (str): path of the offline activation response file
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_TRIAL_EXPIRED, LA_FAIL
 |
 |  CheckForReleaseUpdate(platform, version, channel, release_callback)
 |      Checks whether a new release is available for the product.
 |
 |      This function should only be used if you manage your releases through
 |      Cryptlex release management API.
 |
 |      Args:
 |              platform (str): release platform e.g. windows, macos, linux
 |              version (str): current release version
 |              channel (str): release channel e.g. stable
 |              release_callback (Callable[int]]): callback function
 |
 |      Raises:
 |              LexActivatorException
 |
 |  DeactivateLicense()
 |      Deactivates the license activation and frees up the corresponding activation
 |      slot by contacting the Cryptlex servers.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_FAIL
 |
 |  DecrementActivationMeterAttributeUses(name, decrement)
 |      Decrements the meter attribute uses of the activation.
 |
 |      Args:
 |              name (str): name of the meter attribute
 |              decrement (int): the decrement value
 |
 |      Raises:
 |              LexActivatorException
 |
 |  ExtendLocalTrial(trialExtensionLength)
 |      Extends the local trial.
 |
 |      This function is only meant for unverified trials.
 |
 |      Args:
 |              trialExtensionLength (int): number of days to extend the trial
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_FAIL
 |
 |  GenerateOfflineActivationRequest(file_path)
 |      Generates the offline activation request needed for generating offline
 |      activation response in the dashboard.
 |
 |      Args:
 |              file_path (str): path of the file for the offline request.
 |
 |      Raises:
 |              LexActivatorException
 |
 |  GenerateOfflineDeactivationRequest(file_path)
 |      Generates the offline deactivation request needed for deactivation of the
 |      license in the dashboard and deactivates the license locally.
 |
 |      A valid offline deactivation file confirms that the license has been
 |      successfully deactivated on the user's machine.
 |
 |      Args:
 |              file_path (str): path of the file for the offline deactivation request
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_FAIL
 |
 |  GenerateOfflineTrialActivationRequest(file_path)
 |      Generates the offline trial activation request needed for generating offline
 |      trial activation response in the dashboard.
 |
 |      Args:
 |              file_path (str): path of the file for the offline request
 |
 |      Raises:
 |              LexActivatorException
 |
 |  GetActivationMetadata(key)
 |      Gets the activation metadata.
 |
 |      Args:
 |              key (str): metadata key to retrieve the value
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: value of metadata for the key
 |
 |  GetActivationMeterAttributeUses(name)
 |      Gets the meter attribute uses consumed by the activation.
 |
 |      Args:
 |              name (str): name of the meter attribute
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: value of meter attribute uses by the activation
 |
 |  GetLibraryVersion()
 |      Gets the version of this library.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: the library version
 |
 |  GetLicenseAllowedActivations()
 |      Gets the allowed activations of the license.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: the allowed activation
 |
 |  GetLicenseExpiryDate()
 |      Gets the license expiry date timestamp.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: the timestamp
 |
 |  GetLicenseKey()
 |      Gets the license key used for activation.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: the license key
 |
 |  GetLicenseMetadata(key)
 |      Gets the license metadata as set in the dashboard.
 |
 |      Args:
 |              key (str): metadata key to retrieve the value
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: value of metadata for the key
 |
 |  GetLicenseMeterAttribute(name)
 |      Gets the license meter attribute allowed, total and gross uses.
 |
 |      Args:
 |              name (str): name of the meter attribute
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              LicenseMeterAttribute: values of meter attribute allowed, total and gross uses
 |
 |  GetLicenseTotalActivations()
 |      Gets the total activations of the license.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: the total activations
 |
 |  GetLicenseType()
 |      Gets the license type.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: the license type - node-locked or hosted-floating
 |
 |  GetLicenseUserCompany()
 |      Gets the company associated with the license user.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: the license user company
 |
 |  GetLicenseUserEmail()
 |      Gets the email associated with license user.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: the license user email
 |
 |  GetLicenseUserMetadata(key)
 |      Gets the metadata associated with the license user.
 |
 |      Args:
 |              key (str): metadata key to retrieve the value
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: value of metadata for the key
 |
 |  GetLicenseUserName()
 |      Gets the name associated with the license user.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: the license user name
 |
 |  GetLocalTrialExpiryDate()
 |      Gets the local trial expiry date timestamp.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: the timestamp
 |
 |  GetProductMetadata(key)
 |      Gets the product metadata as set in the dashboard.
 |
 |      Args:
 |              key (str): metadata key to retrieve the value
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: value of metadata for the key
 |
 |  GetServerSyncGracePeriodExpiryDate()
 |      Gets the server sync grace period expiry date timestamp.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: the timestamp
 |
 |  GetTrialActivationMetadata(key)
 |      Gets the trial activation metadata.
 |
 |      Args:
 |              key (str): metadata key to retrieve the value
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: value of metadata for the key
 |
 |  GetTrialExpiryDate()
 |      Gets the trial expiry date timestamp.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: the timestamp
 |
 |  GetTrialId()
 |      Gets the trial activation id. Used in case of trial extension.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              str: the trial id
 |
 |  IncrementActivationMeterAttributeUses(name, increment)
 |      Increments the meter attribute uses of the activation.
 |
 |      Args:
 |              name (str):  name of the meter attribute
 |              increment (int): the increment value
 |
 |      Raises:
 |              LexActivatorException
 |
 |  IsLicenseGenuine()
 |      It verifies whether your app is genuinely activated or not. The verification
 |      is done locally by verifying the cryptographic digital signature fetched at
 |      the time of activation.
 |
 |      After verifying locally, it schedules a server check in a separate thread.
 |      After the first server sync it periodically does further syncs at a frequency
 |      set for the license.
 |
 |      In case server sync fails due to network error, and it continues to fail for
 |      fixed number of days (grace period), the function returns
 |      LA_GRACE_PERIOD_OVER instead of LA_OK.
 |
 |      This function must be called on every start of your program to verify the
 |      activation of your app.
 |
 |      Note:
 |              If application was activated offline using ActivateLicenseOffline() function,
 |              you may want to set grace period to 0 to ignore grace period.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_EXPIRED, LA_SUSPENDED, LA_GRACE_PERIOD_OVER, LA_FAIL
 |
 |  IsLicenseValid()
 |      It verifies whether your app is genuinely activated or not. The verification
 |      is done locally by verifying the cryptographic digital signature fetched at
 |      the time of activation.
 |
 |      This is just an auxiliary function which you may use in some specific cases,
 |      when you want to skip the server sync.
 |
 |      Note:
 |              You may want to set grace period to 0 to ignore grace period.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_EXPIRED, LA_SUSPENDED, LA_GRACE_PERIOD_OVER, LA_FAIL
 |
 |  IsLocalTrialGenuine()
 |      It verifies whether trial has started and is genuine or not. The verification
 |      is done locally.
 |
 |      This function must be called on every start of your program during the trial period.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_LOCAL_TRIAL_EXPIRED, LA_FAIL
 |
 |  IsTrialGenuine()
 |      It verifies whether trial has started and is genuine or not. The verification
 |      is done locally by verifying the cryptographic digital signature fetched at
 |      the time of trial activation.
 |
 |      This function must be called on every start of your program during the trial
 |      period.
 |
 |      Raises:
 |              LexActivatorException
 |
 |      Returns:
 |              int: LA_OK, LA_TRIAL_EXPIRED, LA_FAIL
 |
 |  Reset()
 |      Resets the activation and trial data stored in the machine.
 |
 |      This function is meant for developer testing only.
 |
 |      Raises:
 |              LexActivatorException
 |
 |  ResetActivationMeterAttributeUses(name)
 |      Resets the meter attribute uses of the activation.
 |
 |      Args:
 |              name (str): name of the meter attribute
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetActivationMetadata(key, value)
 |      Sets the activation metadata.
 |
 |      The metadata appears along with the activation details of the license in
 |      dashboard.
 |
 |      Args:
 |              key (str): string of maximum length 256 characters with utf-8 encoding
 |              value (str): string of maximum length 256 characters with utf-8 encoding
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetAppVersion(app_version)
 |      Sets the current app version of your application.
 |
 |      The app version appears along with the activation details in dashboard. It is
 |      also used to generate app analytics.
 |
 |      Args:
 |              app_version (str): string of maximum length 256 characters with utf-8 encoding.
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetCryptlexHost(host)
 |      In case you are running Cryptlex on-premise, you can set the host for your
 |      on-premise server.
 |
 |      Args:
 |              host (str): the address of the Cryptlex on-premise server
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetCustomDeviceFingerprint(fingerprint)
 |      In case you don't want to use the LexActivator's advanced
 |      device fingerprinting algorithm, this function can be used to set a custom
 |      device fingerprint.
 |
 |      If you decide to use your own custom device fingerprint then this function must be
 |      called on every start of your program immediately after calling SetProductFile()
 |      or SetProductData() function.
 |
 |      The license fingerprint matching strategy is ignored if this function is used.
 |
 |      Args:
 |              fingerprint (str): string of minimum length 64 characters and maximum length 256 characters
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetLicenseCallback(license_callback)
 |      Sets server sync callback function.
 |
 |      Whenever the server sync occurs in a separate thread, and server returns the
 |      response, event listener function gets invoked with the following status
 |      codes: LA_OK, LA_EXPIRED, LA_SUSPENDED, LA_E_REVOKED,
 |      LA_E_ACTIVATION_NOT_FOUND, LA_E_MACHINE_FINGERPRINT LA_E_COUNTRY, LA_E_INET,
 |      LA_E_SERVER, LA_E_RATE_LIMIT, LA_E_IP
 |
 |      Args:
 |              license_callback (Callable[int]]): callback function
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetLicenseKey(license_key)
 |      Sets the license key required to activate the license.
 |
 |      Args:
 |              license_key (str): a valid license key
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetLicenseUserCredential(email, password)
 |      Sets the license user email and password for authentication.
 |
 |      This function must be called before ActivateLicense() or IsLicenseGenuine()
 |      function if requireAuthentication property of the license is set to true.
 |
 |      Args:
 |              email (str): user email address
 |              password (str): user password
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetNetworkProxy(proxy)
 |      Sets the network proxy to be used when contacting CryptLex servers.
 |
 |      The proxy format should be: [protocol://][username:password@]machine[:port]
 |
 |      Note:
 |              Proxy settings of the computer are automatically detected. So,
 |              in most of the cases you don't need to care whether your user is behind a
 |              proxy server or not.
 |
 |      Args:
 |              proxy (str): proxy having correct proxy format
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetOfflineActivationRequestMeterAttributeUses(name, uses)
 |      Sets the meter attribute uses for the offline activation request.
 |
 |      This function should only be called before GenerateOfflineActivationRequest()
 |      function to set the meter attributes in case of offline activation.
 |
 |      Args:
 |              name (str): name of the meter attribute
 |              uses (int): the uses value
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetProductData(product_data)
 |      Embeds the Product.dat file in the application.
 |
 |      It can be used instead of SetProductFile() in case you want to embed the
 |      Product.dat file in your application.
 |
 |      This function must be called on every start of your program before any other
 |      functions are called.
 |
 |      Args:
 |              product_data (str): content of the Product.dat file
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetProductFile(file_path)
 |      Sets the absolute path of the Product.dat file.
 |
 |      This function must be called on every start of your program before any other
 |      functions are called.
 |
 |      Args:
 |              file_path (str): absolute path of the product file (Product.dat)
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetProductId(product_id, flags)
 |      Sets the product id of your application.
 |
 |      This function must be called on every start of your program before any other
 |      functions are called, with the exception of SetProductFile() or
 |      SetProductData() function.
 |
 |      Args:
 |              product_id (str): the unique product id of your application as mentioned on the product page in the dashboard
 |              flags (str): depending upon whether your application requires admin/root permissions to run or not, this parameter can have one of the following values: LA_SYSTEM, LA_USER, LA_IN_MEMORY
 |
 |      Raises:
 |              LexActivatorException
 |
 |  SetTrialActivationMetadata(key, value)
 |      Sets the trial activation metadata.
 |
 |      The metadata appears along with the trial activation details of the product
 |      in dashboard.
 |
 |      Args:
 |              key (str): string of maximum length 256 characters with utf-8 encoding
 |              value (str): string of maximum length 256 characters with utf-8 encoding
 |
 |      Raises:
 |              LexActivatorException
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)